#!/usr/bin/perl

use MooseX::Declare;

class WebVTTToTTML {
    use FindBin qw/$Bin/;
    use lib "$Bin";
    use XOptions;
    use Utyls;
    use XML::Writer;
    use Data::Dumper;
    use JSON;
    use Function::Parameters qw/:strict/;
    use Types::Standard qw/Str Num Int Ref HashRef ArrayRef
                           Any Item RegexpRef CodeRef Undef
                           Bool Maybe Value Object/;

    has j => (isa => 'JSON', is => 'ro', default => sub {
                 JSON->new->utf8(1)->pretty(1)});
    has u => (isa => 'Utyls', is => 'ro', default => sub {Utyls->new});
    has xml => (isa => 'XML::Writer', is => 'ro', default => sub {
                    XML::Writer->new(
                        OUTPUT => 'self',
                        DATA_MODE => 1,
                        DATA_INDENT => 2,
                        ENCODING => 'utf8')});
    has o => (isa => 'HashRef', is => 'ro', lazy => 0, builder => '_o_builder');
    has language_map_2_3 => (
        isa => 'HashRef', is => 'ro', lazy => 1, builder => '_lm23_builder');
    has normal_style => (isa => 'Str', is => 'ro', default => 'normal');
    has default_region => (isa => 'Str', is => 'ro', default => 'bottom');

    has extent => (isa => 'Str', is => 'ro', default => '80% 20%');
    has origin => (isa => 'Str', is => 'ro', default => '10% 80%');

    has language_map_3_2 => (isa => 'HashRef', is => 'ro', default => sub {+{
          'aar' => 'aa',
          'abk' => 'ab',
          'afr' => 'af',
          'aka' => 'ak',
          'alb' => 'sq',
          'amh' => 'am',
          'ara' => 'ar',
          'arg' => 'an',
          'arm' => 'hy',
          'asm' => 'as',
          'ava' => 'av',
          'ave' => 'ae',
          'aym' => 'ay',
          'aze' => 'az',
          'bak' => 'ba',
          'bam' => 'bm',
          'baq' => 'eu',
          'bel' => 'be',
          'ben' => 'bn',
          'bih' => 'bh',
          'bis' => 'bi',
          'bod' => 'bo',
          'bos' => 'bs',
          'bre' => 'br',
          'bul' => 'bg',
          'bur' => 'my',
          'cat' => 'ca',
          'ces' => 'cs',
          'cha' => 'ch',
          'che' => 'ce',
          'chi' => 'zh',
          'chu' => 'cu',
          'chv' => 'cv',
          'cor' => 'kw',
          'cos' => 'co',
          'cre' => 'cr',
          'cym' => 'cy',
          'cze' => 'cs',
          'dan' => 'da',
          'deu' => 'de',
          'div' => 'dv',
          'dut' => 'nl',
          'dzo' => 'dz',
          'ell' => 'el',
          'eng' => 'en',
          'epo' => 'eo',
          'est' => 'et',
          'eus' => 'eu',
          'ewe' => 'ee',
          'fao' => 'fo',
          'fas' => 'fa',
          'fij' => 'fj',
          'fin' => 'fi',
          'fra' => 'fr',
          'fre' => 'fr',
          'fry' => 'fy',
          'ful' => 'ff',
          'geo' => 'ka',
          'ger' => 'de',
          'gla' => 'gd',
          'gle' => 'ga',
          'glg' => 'gl',
          'glv' => 'gv',
          'gre' => 'el',
          'grn' => 'gn',
          'guj' => 'gu',
          'hat' => 'ht',
          'hau' => 'ha',
          'heb' => 'he',
          'her' => 'hz',
          'hin' => 'hi',
          'hmo' => 'ho',
          'hrv' => 'hr',
          'hun' => 'hu',
          'hye' => 'hy',
          'ibo' => 'ig',
          'ice' => 'is',
          'ido' => 'io',
          'iii' => 'ii',
          'iku' => 'iu',
          'ile' => 'ie',
          'ina' => 'ia',
          'ind' => 'id',
          'ipk' => 'ik',
          'isl' => 'is',
          'ita' => 'it',
          'jav' => 'jv',
          'jpn' => 'ja',
          'kal' => 'kl',
          'kan' => 'kn',
          'kas' => 'ks',
          'kat' => 'ka',
          'kau' => 'kr',
          'kaz' => 'kk',
          'khm' => 'km',
          'kik' => 'ki',
          'kin' => 'rw',
          'kir' => 'ky',
          'kom' => 'kv',
          'kon' => 'kg',
          'kor' => 'ko',
          'kua' => 'kj',
          'kur' => 'ku',
          'lao' => 'lo',
          'lat' => 'la',
          'lav' => 'lv',
          'lim' => 'li',
          'lin' => 'ln',
          'lit' => 'lt',
          'ltz' => 'lb',
          'lub' => 'lu',
          'lug' => 'lg',
          'mac' => 'mk',
          'mah' => 'mh',
          'mal' => 'ml',
          'mao' => 'mi',
          'mar' => 'mr',
          'may' => 'ms',
          'mkd' => 'mk',
          'mlg' => 'mg',
          'mlt' => 'mt',
          'mon' => 'mn',
          'mri' => 'mi',
          'msa' => 'ms',
          'mya' => 'my',
          'nau' => 'na',
          'nav' => 'nv',
          'nbl' => 'nr',
          'nde' => 'nd',
          'ndo' => 'ng',
          'nep' => 'ne',
          'nld' => 'nl',
          'nno' => 'nn',
          'nob' => 'nb',
          'nor' => 'no',
          'nya' => 'ny',
          'oci' => 'oc',
          'oji' => 'oj',
          'ori' => 'or',
          'orm' => 'om',
          'oss' => 'os',
          'pan' => 'pa',
          'per' => 'fa',
          'pli' => 'pi',
          'pol' => 'pl',
          'por' => 'pt',
          'pus' => 'ps',
          'que' => 'qu',
          'roh' => 'rm',
          'ron' => 'ro',
          'rum' => 'ro',
          'run' => 'rn',
          'rus' => 'ru',
          'sag' => 'sg',
          'san' => 'sa',
          'sin' => 'si',
          'slk' => 'sk',
          'slo' => 'sk',
          'slv' => 'sl',
          'sme' => 'se',
          'smo' => 'sm',
          'sna' => 'sn',
          'snd' => 'sd',
          'som' => 'so',
          'sot' => 'st',
          'spa' => 'es',
          'sqi' => 'sq',
          'srd' => 'sc',
          'srp' => 'sr',
          'ssw' => 'ss',
          'sun' => 'su',
          'swa' => 'sw',
          'swe' => 'sv',
          'tah' => 'ty',
          'tam' => 'ta',
          'tat' => 'tt',
          'tel' => 'te',
          'tgk' => 'tg',
          'tgl' => 'tl',
          'tha' => 'th',
          'tib' => 'bo',
          'tir' => 'ti',
          'ton' => 'to',
          'tsn' => 'tn',
          'tso' => 'ts',
          'tuk' => 'tk',
          'tur' => 'tr',
          'twi' => 'tw',
          'uig' => 'ug',
          'ukr' => 'uk',
          'urd' => 'ur',
          'uzb' => 'uz',
          'ven' => 've',
          'vie' => 'vi',
          'vol' => 'vo',
          'wel' => 'cy',
          'wln' => 'wa',
          'wol' => 'wo',
          'xho' => 'xh',
          'yid' => 'yi',
          'yor' => 'yo',
          'zha' => 'za',
          'zho' => 'zh',
          'zul' => 'zu'}});

    method _lm23_builder () {
        my $lm32= +{};
        for my $key (keys %{$self->language_map_3_2}) {
            $lm32->{$self->language_map_3_2->{$key}}= $key;
        }
        $lm32;
    }

    method _o_builder () {
        XOptions->new(
            custom_options => +[

                +{name => 'input',
                  short => 'i',
                  type => 'string',
                  required => 1,
                  help => "
                      The file names of the input WebVTT files,
                      together with the language of each file.  Use
                      the format -i
                      filename:language,filename:language.  For
                      example:
                      abc-english.webvtt:en,abc-arabic.webvtt:ar.  You
                      can specify the language in ISO-639-2 (3
                      characters), ISO-639-3 (3 characters), or
                      ISO-639-1 (2 characters), but if you specify a
                      3-character language code, this program will
                      convert it into a 2-character language code for
                      use in the target TTML file.  The file or files
                      you specify here will all be rendered as a
                      single TTML file; that format supports multiple
                      languages in a single file.  The target TTML
                      file will have the name you specify with the
                      --output option."},

                +{name => 'output',
                  short => 'o',
                  type => 'string',
                  required => 1,
                  help => "
                      The file name to which you want to write the
                      resulting TTML. See the --force option if you
                      want to overwrite an existing TTML file."},

                +{name => 'title',
                  short => 't',
                  type => 'string',
                  required => 1,
                  help => "
                      The title of the video that the input caption
                      files belong to."},

                +{name => 'force',
                  short => 'f',
                  type => 'boolean',
                  help => "
                      Normally, this program halts if the output TTML
                      file already exists.  Use this option if you
                      want the program to overwrite the output file
                      when it already exists."},

                +{name => 'limit',
                  short => 'l',
                  type => 'integer',
                  default => 0,
                  help => "
                      This option allows you to limit the number of
                      caption records to process.  If you don't
                      provide a value for this option, then the entire
                      input file is processed.  Otherwise, processing
                      stops after the number of records you specify
                      here."},

            ]
        )->options;
    }

    method render_ttml_head () {
        $self->xml->startTag('head');
        $self->xml->emptyTag('metadata', 'ttm:title' => $self->o->{title});
        $self->xml->startTag('layout');
        $self->xml->emptyTag(
            'region',
            'xml:id' => $self->default_region,
            'tts:origin' => $self->origin,
            'tts:extent' => $self->extent,
            'tts:textAlign' => 'center',
            'tts:displayAlign' => 'after');
        $self->xml->endTag('layout');
        $self->xml->endTag('head');
    }

    method render_ttml(HashRef $captions) {
        $self->xml->xmlDecl('UTF-8');
        $self->xml->startTag(
            'tt',
            'xml:lang' => 'en',
            'xmlns' => 'http://www.w3.org/ns/ttml',
            'xmlns:tts' => 'http://www.w3.org/ns/ttml#styling',
            'xmlns:ttl' => 'http://www.w3.org/ns/ttml#layout',
            'xmlns:ttm' => 'http://www.w3.org/ns/ttml#metadata');
        $self->render_ttml_head;
        $self->xml->startTag('body');
        for my $language (keys %$captions) {
            $self->xml->startTag('div', 'xml:lang' => $language);
            for my $record (@{$captions->{$language}}) {
                $self->xml->dataElement(
                    'p',
                    join("<br/>\n", @{$record->{lines}}),
                    begin => $record->{begin},
                    end => $record->{end},
                    region => $self->default_region);
            }
            $self->xml->endTag('div');
        }
        $self->xml->endTag('body');
        $self->xml->endTag('tt');
        $self->xml->end;
    }

    method parse_webvtt(Str $filename, Str $webvtt) {
        my @lines= split /\r\n|\r|\n/, $webvtt;
        if(@lines < 3) {
            $self->logit("File '$filename' is empty.\n");
            exit(1);
        }
        my $header= shift @lines;
        unless($header =~ /^[^a-z]*WEBVTT$/) {
            $self->logit(
                "WebVTT header is not valid for input file '$filename'");
            exit(1);
        }
        my %record;
        my @records;
        my $count= 0;
        while(@lines) {
            my $line= shift @lines;
            last unless defined($line);
            if($self->o->{limit} && $count >= $self->o->{limit}) {
                $self->logit("Reached limit.");
                last;
            }
            if(
                $line eq ''
                && join(',', sort keys %record)
                   eq 'begin,end,index,lines'
            ) {
                push @records, +{%record} if %record;
                %record= ();
                $count++;
                next;
            }
            if(!%record && $line =~ /^(\d+)/) {
                $record{index}= $1;
                next;
            }
            if(
                join(',', sort keys %record) eq 'index'
                && $line =~ /^(\d{2}:\d{2}:\d{2}\.\d{3})
                             \s+-->\s+
                             (\d{2}:\d{2}:\d{2}\.\d{3})\s*$/x
            ) {
                $record{begin}= $1;
                $record{end}= $2;
                next;
            }
            if(join(',', sort keys %record)
                   eq 'begin,end,index'
               || join(',', sort keys %record)
                   eq 'begin,end,index,lines'
            ) {
                $record{lines}= +[] unless exists $record{lines};
                push @{$record{lines}}, $line;
                next;
            }
        }
        +[@records];
    }

    method logit (@message) {
        print $self->u->log_format(@message);
    }

    method parse_input_file_names () {
        my %inputs= map {
            my ($file, $language)= split /:/, $_;
            ($language => $file)
        } (split /,/, $self->o->{input});
        for my $language (keys %inputs) {
            if(!$language) {
                $self->logit(
                    "You must provide a language for each filename. ",
                    "Use the --help option for more information.");
                exit(1);
            }
            if(length($language) == 3) {
                my $l2= $self->language_map_3_2->{$language} || '';
                if($l2) {
                    $inputs{$l2}= $inputs{$language};
                    delete $inputs{$language};
                    $language= $l2;
                }
                else {
                    $self->logit("Unknown language '", $language, "'");
                    exit(1);
                }
            }
            if(
                length($language) != 2
                || !$self->language_map_2_3->{$language}
            ) {
                $self->logit("Unknown language '", $language, "'");
                exit(1);
            }
        }
        %inputs;
    }

    method run () {
        my %inputs= $self->parse_input_file_names;
        my $output= $self->o->{output};
        if(-f $output && !$self->o->{force}) {
            $self->logit("File '$output' already exists.");
            exit(1);
        }
        my $parsed= +{};
        for my $language (keys %inputs) {
            my $filename= $inputs{$language};
            $self->logit("Processing language $language, file $filename");
            my $webvtt= $self->u->slurp($filename);
            $parsed->{$language}= $self->parse_webvtt($filename, $webvtt);
        }
        $self->render_ttml($parsed);
        my $xml= $self->xml->to_string;
        $self->u->spew($self->o->{output}, $self->xml);
    }
}

WebVTTToTTML->new->run;
